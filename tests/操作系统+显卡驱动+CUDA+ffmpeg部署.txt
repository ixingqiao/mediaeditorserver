window远程桌面信息：192.168.42.105 账号信息：A/125521
windows环境下安装相应microsoft store ubuntu24.04 
访问根目录：\\wsl.localhost\Ubuntu-24.04 
apt-get update
apt install nvidia-utils-535
apt install nvidia-cuda-toolkit 
apt install ffmpeg

ubuntu系统环境：22.04
10.1.9.167  root/UniUbi@1234#
uniubi/UniUbi@1234#
root@alg-dev17:~# cat /etc/issue
Ubuntu 22.04.3 LTS \n \l

root@alg-dev17:~# uname -a
Linux alg-dev17 5.15.0-107-generic #117-Ubuntu SMP Fri Apr 26 12:26:49 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux
root@alg-dev17:~# lscpu
Architecture:            x86_64
  CPU op-mode(s):        32-bit, 64-bit
  Address sizes:         45 bits physical, 48 bits virtual
  Byte Order:            Little Endian
CPU(s):                  8
  On-line CPU(s) list:   0-7
Vendor ID:               GenuineIntel
  Model name:            Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz
    CPU family:          6
    Model:               85
    Thread(s) per core:  1
    Core(s) per socket:  1
    Socket(s):           8
    Stepping:            4
    BogoMIPS:            4589.21
Virtualization features: 
  Hypervisor vendor:     VMware
  Virtualization type:   full
Caches (sum of all):     
  L1d:                   256 KiB (8 instances)
  L1i:                   256 KiB (8 instances)
  L2:                    8 MiB (8 instances)
  L3:                    198 MiB (8 instances)
NUMA:                    
  NUMA node(s):          1
  NUMA node0 CPU(s):     0-7
Vulnerabilities:  

root@alg-dev17:~# nvcc -V
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2021 NVIDIA Corporation
Built on Thu_Nov_18_09:45:30_PST_2021
Cuda compilation tools, release 11.5, V11.5.119
Build cuda_11.5.r11.5/compiler.30672275_0

root@alg-dev17:~# cd /usr/local/
root@alg-dev17:/usr/local# ls
bin  cuda  cuda-12.4  etc  games  include  lib  man  sbin  share  src

root@alg-dev17:~# nvidia-smi
Wed May 15 17:37:06 2024       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.171.04             Driver Version: 535.171.04   CUDA Version: 12.2     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA GeForce GTX 1080 Ti     On  | 00000000:0B:00.0 Off |                  N/A |
| 23%   28C    P8               8W / 250W |      2MiB / 11264MiB |      0%      Default |
|                                         |                      |                  N/A |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
|  No running processes found                                                           |
+---------------------------------------------------------------------------------------+

宿主机上安装：要严格注意显卡+驱动+系统+cuda之间的版本的关系，完全按照文档描述的版本即可
apt-get update
apt install nvidia-utils-535
apt install nvidia-cuda-toolkit
apt install docker.io

curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
  && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list

驱动下载位置：
https://www.nvidia.cn/drivers/details/224621/

cuda手动下载位置:
https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=runfile_local


sudo apt-get update
sudo apt-get install -y nvidia-container-toolkit
sudo nvidia-ctk runtime configure --runtime=docker
sudo systemctl restart docker

安装cuda：
chmod a+x ./cuda_12.4.1_550.54.15_linux.run
sh ./cuda_12.4.1_550.54.15_linux.run
不用安装driver

镜像:
ubuntu        latest    bf3dc08bfed0   2 weeks ago    76.2MB

启动容器：
docker run -itd --gpus all -e NVIDIA_DRIVER_CAPABILITIES=all --name ubuntu-ffmpeg-cuda --hostname ubuntu-ffmpeg-cuda --privileged=true --net=host -v /home/uniubi/:/data -v /usr/local/cuda/:/usr/local/cuda/ ubuntu:latest

容器内：增加环境变量
export CUDA_HOME=/usr/local/cuda
export PATH=/usr/local/cuda/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda/lib64

安装ffmpeg 
apt-get install ffmpeg

官方性能：https://developer.nvidia.com/video-encode-and-decode-gpu-support-matrix-new#Encoder

docker run -itd --gpus all -e NVIDIA_DRIVER_CAPABILITIES=all --name ubuntu-ffmpeg-cuda --hostname ubuntu-ffmpeg-cuda --privileged=true --net=host -v /home/uniubi/:/data -v /usr/local/cuda/:/usr/local/cuda/ ubuntu:latest

测试转码：ffmpeg -hwaccel cuda -i ./src_1.mp4 -c:v h264_nvenc -preset fast ./output.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=29 -c:v h264_nvenc -preset fast -profile:v high cuda_2.mp4
直接执行如上shell命令行执行，或者python执行脚本执行如上命令发现并没有使用dec单元硬解的话，而硬编还是用的enc单元，还有相应的报错，换个工作文件夹就ok了，这种多半是路径的文件权限的问题

视频拼接转场效果：
ffmpeg -i v0.mp4 -i v1.mp4 -i v2.mp4 -i v3.mp4 -i v4.mp4 -filter_complex \
'[0][1]xfade=transition=hlslice:duration=1:offset=2[V01]; \
 [V01][2]xfade=transition=radial:duration=1:offset=4[V02]; \
 [V02][3]xfade=transition=dissolve:duration=1:offset=6[V03]; \
 [V03][4]xfade=transition=vuslice:duration=1:offset=8,format=yuv420p[video]; \
 [0:a][1:a]acrossfade=d=0.5:c1=tri:c2=tri[A01]; \
 [A01][2:a]acrossfade=d=0.5:c1=tri:c2=tri[A02]; \
 [A02][3:a]acrossfade=d=0.5:c1=tri:c2=tri[A03]; \
 [A03][4:a]acrossfade=d=0.5:c1=tri:c2=tri[audio]' \
-map '[video]' -map '[audio]' -movflags +faststart xfade.mp4

容器中源码编译：ubuntu:latest

ffmpeg-6.1.1  ffmpeg-6.1.1.tar.bz2  ffmpeg-7.0  ffmpeg-7.0.tar.bz2  nv-codec-headers
https://github.com/FFmpeg/nv-codec-headers/tree/sdk/12.1

注意切换特定分支,一定要注意版本的匹配 
git checkout n12.1.14.0
root@ubuntu-ffmpeg-cuda:/opt/nv-codec-headers# cat README 
FFmpeg version of headers required to interface with Nvidias codec APIs.
Corresponds to Video Codec SDK version 12.0.16.
Minimum required driver versions:
Linux: 530.41.03 or newer
Windows: 531.61 or newer

apt-get update && sudo apt-get -y install \
  autoconf \
  automake \
  build-essential \
  cmake \
  git-core \
  libass-dev \
  libfreetype6-dev \
  libgnutls28-dev \
  libmp3lame-dev \
  libsdl2-dev \
  libtool \
  libva-dev \
  libvdpau-dev \
  libvorbis-dev \
  libxcb1-dev \
  libxcb-shm0-dev \
  libxcb-xfixes0-dev \
  meson \
  ninja-build \
  pkg-config \
  texinfo \
  wget \
  yasm \
  zlib1g-dev \
  libunistring-dev

sudo apt-get -y install build-essential pkg-config checkinstall git libfaac-dev libgpac-dev ladspa-sdk-dev libunistring-dev libbz2-dev \
  libjack-jackd2-dev libmp3lame-dev libsdl2-dev libopencore-amrnb-dev libopencore-amrwb-dev libvpx-dev libx264-dev libx265-dev libxvidcore-dev libopenal-dev libopus-dev \
  libsdl1.2-dev libtheora-dev libva-dev libvdpau-dev libvorbis-dev libx11-dev \
  libxfixes-dev texi2html yasm zlib1g-dev

./configure \
--prefix="/usr/local/ffmpeg/" \
--extra-cflags="-I/usr/local/cuda/include" \
--extra-ldflags="-L/usr/local/cuda/lib64" \
--extra-libs="-lpthread -lm" \
--bindir="/usr/local/ffmpeg/bin" \
--enable-shared \
--enable-ffplay \
--enable-cuda --enable-cuvid --enable-nvenc \
--enable-gpl \
--enable-libaom \
--enable-libass \
--enable-libfdk-aac \
--enable-libfreetype \
--enable-libmp3lame \
--enable-libopus \
--enable-libvorbis \
--enable-libvpx \
--enable-libx264 \
--enable-libx265 \
--enable-nonfree

apt-get install ffmpeg中的配置项
./configure --prefix=/usr/local/ffmpeg --extra-version=3ubuntu5 --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --disable-omx --enable-gnutls --enable-libass --enable-libcdio  --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libglslang --enable-libgme --enable-libgsm --enable-libharfbuzz --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-openal --enable-opencl --enable-opengl --disable-sndio --enable-libvpl --disable-libmfx --enable-libdc1394 --enable-libdrm  --enable-ladspa --enable-libjack --enable-libpulse --enable-librabbitmq --enable-librist --enable-libsrt --enable-libssh --enable-libsvtav1 --enable-libx264 --enable-libzmq --enable-libzvbi --enable-sdl2 --enable-libplacebo --enable-librav1e --enable-pocketsphinx --enable-librsvg --enable-libjxl --enable-shared

make install 为了方便执行注意增加环境变量


增加如下补丁可以解除nvenc的会话限制：https://developer.nvidia.com/video-encode-and-decode-gpu-support-matrix-new#Encoder
https://github.com/keylase/nvidia-patch
否则超过会话，就会报out of memmory 但是测试编解码性能并没有多大提升，在如上的1080ti 上可以从原来的5个会话提升到N个会话（超过16个也是会报错），性能还是一样随着任务数分解，一般3个如上的视频拼接任务卡性能就已经打满

root@ubuntu-ffmpeg-cuda:/data/3# python3 parallel_processes_5.py 
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_1.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_2.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_3.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_4.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_5.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_6.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_7.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_8.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_9.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_10.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_11.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_12.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_13.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_14.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_15.mp4
ffmpeg -hwaccel nvdec -i src_1.mp4 -hwaccel nvdec -i src_2.mp4 -filter_complex xfade=transition=fade:duration=1:offset=89 -c:v h264_nvenc 5_16.mp4
进程 1 执行时间: 56.78 秒
进程 2 执行时间: 56.90 秒
进程 3 执行时间: 56.90 秒
进程 4 执行时间: 56.95 秒
进程 5 执行时间: 56.95 秒
进程 6 执行时间: 56.95 秒
进程 7 执行时间: 56.95 秒
进程 8 执行时间: 56.94 秒
进程 9 执行时间: 56.94 秒
进程 10 执行时间: 56.92 秒
进程 11 执行时间: 56.91 秒
进程 12 执行时间: 56.90 秒
进程 13 执行时间: 56.89 秒
进程 14 执行时间: 56.87 秒
进程 15 执行时间: 56.86 秒
进程 16 执行时间: 56.84 秒
所有进程已完成.

速度已经普遍降为了一倍速了，也就意味着合并出来的视频是多少时长差不多就要多长时间了
speed=0.803x

root@ubuntu-ffmpeg-cuda:/data/3# grep -r "frame= 1113 fps=" .        
./process5_2_stderr.log:frame= 1113 fps= 20 q=31.0 Lsize=   10874kB time=00:00:44.36 bitrate=2008.1kbits/s dup=0 drop=752 speed=0.803x    
./process5_4_stderr.log:frame= 1113 fps= 20 q=32.0 Lsize=   11139kB time=00:00:44.36 bitrate=2057.0kbits/s dup=0 drop=752 speed=0.803x    
./process5_12_stderr.log:frame= 1113 fps= 21 q=30.0 Lsize=   10652kB time=00:00:44.36 bitrate=1967.1kbits/s dup=0 drop=752 speed=0.831x    
./process5_7_stderr.log:frame= 1113 fps= 20 q=30.0 Lsize=   10652kB time=00:00:44.36 bitrate=1967.1kbits/s dup=0 drop=752 speed=0.806x    
./process5_9_stderr.log:frame= 1113 fps= 20 q=50.0 Lsize=   18679kB time=00:00:44.36 bitrate=3449.5kbits/s dup=0 drop=752 speed=0.809x    
./process5_10_stderr.log:frame= 1113 fps= 20 q=30.0 Lsize=   10652kB time=00:00:44.36 bitrate=1967.1kbits/s dup=0 drop=752 speed=0.813x    
./process5_8_stderr.log:frame= 1113 fps= 23 q=30.0 Lsize=   10652kB time=00:00:44.36 bitrate=1967.1kbits/s dup=0 drop=752 speed=0.905x    
./process5_3_stderr.log:frame= 1113 fps= 21 q=30.0 Lsize=   10652kB time=00:00:44.36 bitrate=1967.1kbits/s dup=0 drop=752 speed=0.824x    
./process5_5_stderr.log:frame= 1113 fps= 22 q=30.0 Lsize=   10652kB time=00:00:44.36 bitrate=1967.1kbits/s dup=0 drop=752 speed=0.889x    
./process5_14_stderr.log:frame= 1113 fps= 20 q=35.0 Lsize=   11116kB time=00:00:44.36 bitrate=2052.7kbits/s dup=0 drop=752 speed=0.806x    
./process5_11_stderr.log:frame= 1113 fps= 20 q=36.0 Lsize=   11347kB time=00:00:44.36 bitrate=2095.5kbits/s dup=0 drop=752 speed=0.803x    
./process5_15_stderr.log:frame= 1113 fps= 20 q=30.0 Lsize=   10652kB time=00:00:44.36 bitrate=1967.1kbits/s dup=0 drop=752 speed=0.809x    
./process5_16_stderr.log:frame= 1113 fps= 20 q=30.0 Lsize=   10697kB time=00:00:44.36 bitrate=1975.5kbits/s dup=0 drop=752 speed=0.805x    
./process5_6_stderr.log:frame= 1113 fps= 21 q=30.0 Lsize=   10652kB time=00:00:44.36 bitrate=1967.1kbits/s dup=0 drop=752 speed=0.853x    
./process5_1_stderr.log:frame= 1113 fps= 20 q=32.0 Lsize=   10973kB time=00:00:44.36 bitrate=2026.4kbits/s dup=0 drop=752 speed=0.805x    
./process5_13_stderr.log:frame= 1113 fps= 20 q=30.0 Lsize=   10684kB time=00:00:44.36 bitrate=1973.0kbits/s dup=0 drop=752 speed=0.803x    
root@ubuntu-ffmpeg-cuda:/data/3# 

使用xfade的封装的脚本测试：
apt-get install bc

ffmpeg_xfade-transitions-v1.0.6.sh